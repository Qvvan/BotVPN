from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from database.context_manager import DatabaseContextManager
from keyboards.kb_inline import InlineKeyboards, SubscriptionCallbackFactory
from lexicon.lexicon_ru import LEXICON_RU

router = Router()


@router.message(Command(commands='subs'))
async def get_user_subs(message: Message):
    user_id = message.from_user.id
    async with DatabaseContextManager() as session:
        subscription_data = await session.subscription.get_subscription(user_id)
        if subscription_data is None:
            await message.answer(text=LEXICON_RU['not_exists'])
            return
        for data in subscription_data:
            start_date, end_date, vpn_key, server_name, service_name, status, subscription_id = data

            parseSubs = (
                f"üì∂ –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' if status == '–∞–∫—Ç–∏–≤–Ω–∞—è' else 'üî¥ –ò—Å—Ç–µ–∫–ª–∞'}\n"
                f"üíº –£—Å–ª—É–≥–∞: {service_name}\n\n"
                f"üìÜ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date.strftime('%Y-%m-%d')}\n"
                f"üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date.strftime('%Y-%m-%d')}\n\n"
                f"–°—Ç—Ä–∞–Ω–∞: {server_name}\n"
                f"üîë –ö–ª—é—á: {vpn_key}"
            )

            if status == '–∏—Å—Ç–µ–∫–ª–∞':
                keyboard = await InlineKeyboards.extend_subscription(subscription_id)
                await message.answer(
                    text=parseSubs + "\n\nüîÑ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å?",
                    reply_markup=keyboard
                )
            else:
                await message.answer(text=parseSubs)


@router.callback_query(SubscriptionCallbackFactory.filter(F.action == 'extend_subscription'))
async def extend_subscription(callback: CallbackQuery, callback_data: SubscriptionCallbackFactory):
    subscription_id = callback_data.subscription_id
    keyboard = await InlineKeyboards.extend_subscription_options(subscription_id)
    await callback.message.answer(
        text=LEXICON_RU['extend_sub'],
        reply_markup=keyboard,
    )
    await callback.answer()

@router.callback_query(SubscriptionCallbackFactory.filter(F.action == 'extend_with_key'))
async def extend_with_key(callback: CallbackQuery, callback_data: SubscriptionCallbackFactory):
    subscription_id = callback_data.subscription_id
    await callback.message.answer("–ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–ª—é—á–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ.")
    await callback.answer()

@router.callback_query(SubscriptionCallbackFactory.filter(F.action == 'new_order'))
async def new_order(callback: CallbackQuery, callback_data: SubscriptionCallbackFactory):
    subscription_id = callback_data.subscription_id
    await callback.message.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.")
    await callback.answer()
