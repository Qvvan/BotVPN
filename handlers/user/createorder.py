from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, PreCheckoutQuery, LabeledPrice

from database.context_manager import DatabaseContextManager
from handlers.user.subs import extend_sub_successful_payment, new_order_successful_payment
from keyboards.kb_inline import InlineKeyboards, ServiceCallbackFactory, ServerCallbackFactory
from lexicon.lexicon_ru import LEXICON_RU
from logger.logging_config import logger
from services.send_sms_admins import notify_group
from services.services import process_successful_payment
from state.state import ChoiceServer

router = Router()


@router.message(Command(commands='createorder'))
async def create_order(message: Message, state: FSMContext):
    await message.answer(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≤–∞—Å —Å–µ—Ä–≤–µ—Ä.',
        reply_markup=await InlineKeyboards.server_selection_keyboards(),
        parse_mode=ParseMode.MARKDOWN,
    )
    await state.set_state(ChoiceServer.waiting_for_choice)


@router.callback_query(ServerCallbackFactory.filter(), ChoiceServer.waiting_for_choice)
async def server_selected(callback_query: CallbackQuery, callback_data: ServerCallbackFactory, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å–æ–∑–¥–∞–µ–º –∫–ª—é—á."""
    server_id = callback_data.server_id
    count_key = callback_data.available_keys
    if count_key == 0:
        await callback_query.answer(
            text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π.\n'
                 '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏.',
            show_alert=True
        )
        return

    await state.update_data(server_id=server_id)

    await callback_query.message.edit_text(
        text=LEXICON_RU['createorder'],
        reply_markup=await InlineKeyboards.create_order_keyboards(server_id)
    )

    await state.set_state(ChoiceServer.waiting_for_services)


@router.callback_query(ServiceCallbackFactory.filter(), ChoiceServer.waiting_for_services)
async def handle_service_callback(callback_query: CallbackQuery, callback_data: ServiceCallbackFactory,
                                  state: FSMContext):
    service_id = int(callback_data.service_id)
    server_id = callback_data.server_id
    await callback_query.message.delete()

    async with DatabaseContextManager() as session_methods:
        try:
            service = await session_methods.services.get_service_by_id(service_id)
            await send_invoice_handler(message=callback_query.message,
                                       price_service=service.price,
                                       service_name=service.name,
                                       service_id=service_id,
                                       duration_days=service.duration_days,
                                       server_id=server_id
                                       )
        except Exception as e:
            logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
            await callback_query.message.edit_text(text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É")
            await notify_group(
                message=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback_query.message.from_user.username}\n'
                        f'ID: {callback_query.message.from_user.id}\n'
                        f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã\n{e}\n\n'
                        f'#–æ–ø–ª–∞—Ç–∞',
                is_error=True
            )


@router.callback_query(lambda c: c.data == 'back_to_servers', ChoiceServer.waiting_for_services)
async def server_selected(callback_query: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.edit_text(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≤–∞—Å —Å–µ—Ä–≤–µ—Ä.',
        reply_markup=await InlineKeyboards.server_selection_keyboards(),
        parse_mode=ParseMode.MARKDOWN,
    )
    await state.set_state(ChoiceServer.waiting_for_choice)


@router.callback_query(lambda c: c.data == 'back_to_services')
async def back_to_services(callback_query: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å–µ—Ä–≤–∏—Å–∞."""
    data = await state.get_data()
    server_id = data.get('server_id')

    await callback_query.message.answer(
        text=LEXICON_RU['createorder'],
        reply_markup=await InlineKeyboards.create_order_keyboards(server_id)
    )
    await callback_query.message.delete()


async def send_invoice_handler(message: Message, price_service: int, service_name: str, service_id: int,
                               duration_days: int,
                               server_id: str):
    try:
        prices = [LabeledPrice(label="XTR", amount=1)]
        await message.answer_invoice(
            title=f"VPN –Ω–∞ {service_name}",
            description=f"–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏, –æ–ø–ª–∞—Ç–∏ {1} –∑–≤–µ–∑–¥ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.\n"
                        f"‚¨áÔ∏è –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã, —Ç–µ–±–µ –±—É–¥—É—Ç –≤—ã—Å–ª–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN. üòé",
            prices=prices,
            provider_token="",
            payload=f"{service_id}:{duration_days}:{server_id}:new",
            currency="XTR",
            reply_markup=await InlineKeyboards.create_pay(1),
        )
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await message.answer(text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É")


@router.pre_checkout_query()
async def pre_checkout_query(query: PreCheckoutQuery):
    await query.answer(ok=True)


@router.message(F.successful_payment)
async def successful_payment(message: Message):
    payload = message.successful_payment.invoice_payload
    service_id, duration_days, server_id, action = payload.split(':')
    if action == 'new':
        await process_successful_payment(message)
    elif action == 'old':
        await extend_sub_successful_payment(message)
    elif action == 'extend':
        await new_order_successful_payment(message)
