import random
from datetime import datetime, timedelta

from aiogram.types import Message

from database.context_manager import DatabaseContextManager
from handlers.services.create_subscription_service import SubscriptionService
from handlers.services.create_transaction_service import TransactionService
from handlers.services.get_session_cookies import get_session_cookie
from handlers.services.key_create import ShadowsocksKeyManager
from keyboards.kb_inline import InlineKeyboards
from keyboards.kb_reply.kb_inline import ReplyKeyboards
from lexicon.lexicon_ru import LEXICON_RU
from logger.logging_config import logger
from models.models import Subscriptions, SubscriptionStatusEnum, SubscriptionsHistory, NameApp


class SubscriptionsService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ.

    –≠—Ç–æ—Ç –∫–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫, –∞ —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
    """

    @staticmethod
    async def process_new_subscription(message: Message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ.

        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç–µ–∂–µ, —Å–æ–∑–¥–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –ø–æ–¥–ø–∏—Å–∫—É,
        –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º –¥–æ—Å—Ç—É–ø–∞.

        Args:
            message (telegram.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ.

        Raises:
            Exception: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.
        """
        async with DatabaseContextManager() as session_methods:
            try:
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                in_payload = message.successful_payment.invoice_payload.split(':')
                duration_date = in_payload[1]
                user_id = message.from_user.id
                username = message.from_user.username

                transaction_state = await TransactionService.create_transaction(
                    message, 'successful', 'successful', session_methods
                )
                if not transaction_state:
                    raise Exception("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")

                server_ips = await session_methods.servers.get_all_servers()
                if server_ips:
                    random_server = random.choice(server_ips)
                    server_ip = random_server.server_ip
                else:
                    raise Exception("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")

                session_cookie = await get_session_cookie(server_ip)
                shadowsocks_manager = ShadowsocksKeyManager(server_ip, session_cookie)
                key, key_id = shadowsocks_manager.manage_shadowsocks_key(
                    tg_id=str(user_id),
                    username=username,
                )

                subscription_created = await SubscriptionService.create_subscription(
                    message, key, key_id, server_ip, session_methods
                )
                if not subscription_created:
                    raise Exception("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")

                await session_methods.session.commit()
                await SubscriptionsService.send_success_response(message, key)
                await logger.log_info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n"
                                      f"–û—Ñ–æ—Ä–º–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {duration_date} –¥–Ω–µ–π")

            except Exception as e:
                await logger.log_error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n"
                                       f"Error during transaction processing", e)
                await message.answer(text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                await SubscriptionsService.refund_payment(message)

                # –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                await session_methods.session.rollback()

                shadowsocks_manager.delete_key(key_id)

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –æ—Ç–º–µ–Ω–æ–π
                await TransactionService.create_transaction(
                    message, status='–æ—Ç–º–µ–Ω–∞', description=str(e), session_methods=session_methods
                )
                await session_methods.session.commit()

    @staticmethod
    async def extend_sub_successful_payment(message: Message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ.
        """
        async with DatabaseContextManager() as session_methods:
            try:
                in_payload = message.successful_payment.invoice_payload.split(':')
                service_id = int(in_payload[0])
                durations_days = in_payload[1]
                subscription_id = int(in_payload[3])

                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                subs = await session_methods.subscription.get_subscription(message.from_user.id)
                if subs:
                    transaction_state = await TransactionService.create_transaction(
                        message, 'successful', 'successful', session_methods
                    )
                    if not transaction_state:
                        raise Exception("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")

                    for sub in subs:
                        if sub.subscription_id == subscription_id:
                            subscription_data = {
                                "user_id": message.from_user.id,
                                "service_id": service_id,
                                "dynamic_key": sub.dynamic_key,
                                "start_date": datetime.now(),
                                "end_date": datetime.now() + timedelta(days=int(durations_days)),
                                "updated_at": datetime.now(),
                                "status": SubscriptionStatusEnum.ACTIVE
                            }

                            subscription = Subscriptions(**subscription_data)
                            subscription_history = SubscriptionsHistory(**subscription_data)

                            await session_methods.subscription.update_sub(subscription)
                            await session_methods.subscription.create_sub(subscription_history)
                            await message.answer(text=LEXICON_RU['subscription_renewed'])
                            await session_methods.session.commit()
                            await logger.log_info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n"
                                                  f"–ü—Ä–æ–¥–ª–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {durations_days} –¥–Ω–µ–π")
                else:
                    await message.answer(text="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")

            except Exception as e:
                await logger.log_error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n"
                                       f"Error during transaction processing", e)
                await message.answer(text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.")

                await SubscriptionsService.refund_payment(message)

                await session_methods.session.rollback()

                await TransactionService.create_transaction(
                    message, status='–æ—Ç–º–µ–Ω–∞', description=str(e), session_methods=session_methods
                )
                await session_methods.session.commit()

    @staticmethod
    async def extend_with_key(message: Message):
        """
        –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞.

        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞.
        –ï–≥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã.

        Args:
            callback (telegram.CallbackQuery): –ó–∞–ø—Ä–æ—Å –æ—Ç Telegram —Å –¥–∞–Ω–Ω—ã–º–∏ callback.
            callback_data (dict): –î–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–µ —Å callback.
        """
        pass

    @staticmethod
    async def send_success_response(message: Message, vpn_key: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å VPN –∫–ª—é—á–æ–º.

        Args:
            message (telegram.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram, –≤ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
            vpn_key (str): –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞ VPN, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        """
        await message.answer(
            text=f'<pre>{vpn_key}</pre>',
            parse_mode="HTML",
        )
        await message.answer(
            text='–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∏–∂–µ üëá –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è –ø–æ–∫–∞–∑–∞–ª —Ç–µ–±–µ –ø—Ä–æ—Å—Ç—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—èüîå',
            reply_markup=await ReplyKeyboards.get_menu_install_app()
        )

    @staticmethod
    async def refund_payment(message: Message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Telegram.

        Args:
            message (telegram.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ.
        """
        await message.bot.refund_star_payment(message.from_user.id,
                                              message.successful_payment.telegram_payment_charge_id)
