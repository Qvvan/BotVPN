from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.context_manager import DatabaseContextManager
from lexicon.lexicon_ru import LEXICON_RU
from logger.logging_config import logger


class ServiceCallbackFactory(CallbackData, prefix='service'):
    service_id: str


class SubscriptionCallbackFactory(CallbackData, prefix="subscription"):
    action: str
    subscription_id: int


class InlineKeyboards:
    @staticmethod
    async def create_order_keyboards() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å —É—Å–ª—É–≥–∞–º–∏."""
        async with DatabaseContextManager() as session_methods:
            try:
                keyboard = InlineKeyboardBuilder()
                services = await session_methods.services.get_services()
                buttons: list[InlineKeyboardButton] = []

                for service in services:
                    service_id = str(service.service_id)
                    service_name = service.name

                    callback_data = ServiceCallbackFactory(
                        service_id=service_id,
                    ).pack()

                    buttons.append(InlineKeyboardButton(text=service_name, callback_data=callback_data))
                keyboard.row(*buttons)

                keyboard.row(
                    InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')
                )

                return keyboard.as_markup()
            except Exception as e:
                logger.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥', e)

    @staticmethod
    async def create_pay(price) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {price} ‚≠êÔ∏è", pay=True)
        keyboard.button(text="‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã ‚≠ê",
                        url='https://telegra.ph/Instrukciya-po-pokupke-zvezd-dlya-VPN-cherez-Telegram-bota-10-22')
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_services")

        keyboard.adjust(1, 2)

        return keyboard.as_markup()

    @staticmethod
    async def get_support() -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()

        support_user_id = "Masknet_Support"
        support_link = f"t.me/{support_user_id}"

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
        support_button = InlineKeyboardButton(
            text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π üõ†Ô∏è",
            url=support_link
        )

        # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏
        vpn_issue_button = InlineKeyboardButton(
            text="VPN –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚ùå",
            callback_data="vpn_issue"
        )
        low_speed_button = InlineKeyboardButton(
            text="–ù–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å üê¢",
            callback_data="low_speed"
        )
        install_guide_button = InlineKeyboardButton(
            text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ üìÑ",
            callback_data="install_guide"
        )

        keyboard.row(support_button)
        keyboard.row(vpn_issue_button)
        keyboard.row(low_speed_button)
        keyboard.row(install_guide_button)

        return keyboard.as_markup()

    @staticmethod
    async def cancel() -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel'))
        return keyboard.as_markup()

    @staticmethod
    async def extend_subscription(subscription_id: int) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text='üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
            callback_data=SubscriptionCallbackFactory(
                action='extend_subscription',
                subscription_id=subscription_id,
            ).pack()
        ))
        return keyboard.as_markup()

    @staticmethod
    async def extend_subscription_options(subscription_id) -> InlineKeyboardMarkup:

        keyboard = InlineKeyboardBuilder()
        keyboard.add(
            InlineKeyboardButton(
                text='üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å',
                callback_data=SubscriptionCallbackFactory(
                    action='extend_with_key',
                    subscription_id=subscription_id
                ).pack()),
            InlineKeyboardButton(
                text='üÜï –ù–æ–≤–∞—è —É—Å–ª—É–≥–∞',
                callback_data=SubscriptionCallbackFactory(
                    action='new_order',
                    subscription_id=subscription_id
                ).pack()),
        )
        return keyboard.as_markup()

    @staticmethod
    async def get_back_button_keyboard() -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()

        back_button = InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_support_menu"
        )

        keyboard.add(back_button)

        return keyboard.as_markup()

    @staticmethod
    async def show_start_menu() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é."""
        keyboard = InlineKeyboardBuilder()

        # –ö–Ω–æ–ø–∫–∞ "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ"
        know_more_button = InlineKeyboardButton(
            text="–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ",
            callback_data="know_more",
        )

        # –ö–Ω–æ–ø–∫–∞ "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
        subscribe_button = InlineKeyboardButton(
            text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
            callback_data="subscribe"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard.add(know_more_button, subscribe_button)

        return keyboard.as_markup()

    @staticmethod
    async def support_and_subscribe_keyboard() -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
        support_button = InlineKeyboardButton(
            text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞",
            callback_data="support_callback"
        )

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        subscribe_button = InlineKeyboardButton(
            text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
            callback_data="subscribe"
        )

        keyboard.add(support_button, subscribe_button)

        # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        keyboard.adjust(2)

        return keyboard.as_markup()


    @staticmethod
    async def get_guide() -> InlineKeyboardMarkup:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
        keyboard = InlineKeyboardBuilder()

        instruction_button = InlineKeyboardButton(
            text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìñ",
            url=LEXICON_RU['outline_info']  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        )

        keyboard.add(instruction_button)

        return keyboard.as_markup()
