from enum import Enum
from typing import Optional

from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.context_manager import DatabaseContextManager
from lexicon.lexicon_ru import LEXICON_RU
from logger.logging_config import logger
from models.models import NameApp


class ServerCallbackData(CallbackData, prefix="server_disable"):
    action: str
    server_ip: str


class UserPaginationCallback(CallbackData, prefix="user"):
    page: int
    action: str


class UserSelectCallback(CallbackData, prefix="user_select"):
    user_id: int


class ServiceCallbackFactory(CallbackData, prefix='service'):
    service_id: str
    status_pay: str


class SubscriptionCallbackFactory(CallbackData, prefix="subscription"):
    action: str
    subscription_id: Optional[int] = None
    name_app: Optional[str] = None


class ReplaceServerCallbackFactory(CallbackData, prefix="serv"):
    action: str
    subscription_id: Optional[int] = None
    server_ip: str


class ServerSelectCallback(CallbackData, prefix="servers"):
    server_ip: str
    server_name: str


class GuideSelectCallback(CallbackData, prefix="guide"):
    action: str
    name_oc: str
    name_app: str


class StatusPay(Enum):
    NEW = "new"
    OLD = "old"


class InlineKeyboards:
    @staticmethod
    async def create_order_keyboards(status_pay: StatusPay) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å —É—Å–ª—É–≥–∞–º–∏."""
        async with DatabaseContextManager() as session_methods:
            try:
                keyboard = InlineKeyboardBuilder()
                services = await session_methods.services.get_services()
                buttons: list[InlineKeyboardButton] = []

                for service in services:
                    service_id = str(service.service_id)
                    service_name = service.name

                    callback_data = ServiceCallbackFactory(
                        service_id=service_id,
                        status_pay=status_pay.value
                    ).pack()

                    buttons.append(InlineKeyboardButton(text=service_name, callback_data=callback_data))
                keyboard.row(*buttons)

                keyboard.row(
                    InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')
                )

                return keyboard.as_markup()
            except Exception as e:
                await logger.log_error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥', e)

    @staticmethod
    async def get_servers(ip) -> InlineKeyboardMarkup | int:
        async with DatabaseContextManager() as session_methods:
            try:
                keyboard = InlineKeyboardBuilder()
                servers = await session_methods.servers.get_all_servers()
                buttons: list[InlineKeyboardButton] = []

                for server in servers:
                    if server.hidden == 1:
                        continue
                    server_ip = server.server_ip
                    server_name = server.name

                    callback_data = ServerSelectCallback(
                        server_ip=server_ip,
                        server_name=server_name
                    ).pack()

                    buttons.append(InlineKeyboardButton(
                        text=server_name if server_ip != ip else server_name + "(–¢–µ–∫—É—â–∏–π)",
                        callback_data=callback_data))

                if len(buttons) == 0:
                    return 0
                keyboard.row(*buttons)

                keyboard.row(
                    InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')
                )

                keyboard.adjust(1)

                return keyboard.as_markup()
            except Exception as e:
                await logger.log_error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥', e)

    @staticmethod
    async def create_pay(price) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {price} ‚≠êÔ∏è", pay=True)
        keyboard.button(text="‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã ‚≠ê",
                        url='https://telegra.ph/Instrukciya-po-pokupke-zvezd-dlya-VPN-cherez-Telegram-bota-10-22')
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_services")

        keyboard.adjust(1, 2)

        return keyboard.as_markup()

    @staticmethod
    async def get_support() -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()

        support_user_id = "Masknet_Support"
        support_link = f"t.me/{support_user_id}"

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
        support_button = InlineKeyboardButton(
            text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π üõ†Ô∏è",
            url=support_link
        )

        # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏
        vpn_issue_button = InlineKeyboardButton(
            text="VPN –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚ùå",
            callback_data="vpn_issue"
        )
        low_speed_button = InlineKeyboardButton(
            text="–ù–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å üê¢",
            callback_data="low_speed"
        )
        install_guide_button = InlineKeyboardButton(
            text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ üìÑ",
            callback_data="back_to_device_selection"
        )

        keyboard.row(support_button)
        keyboard.row(vpn_issue_button)
        keyboard.row(low_speed_button)
        keyboard.row(install_guide_button)

        return keyboard.as_markup()

    @staticmethod
    async def cancel() -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel'))
        return keyboard.as_markup()

    @staticmethod
    async def menu_subs(subscription_id, name_app, server_ip):
        async with DatabaseContextManager() as session_methods:
            try:
                keyboard = InlineKeyboardBuilder()
                subscription = await session_methods.subscription.get_subscription_by_id(subscription_id)
                keyboard.add(
                    InlineKeyboardButton(
                        text='üÜï –°–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é',
                        callback_data=ReplaceServerCallbackFactory(
                            action='rep_serv',
                            subscription_id=subscription_id,
                            server_ip=server_ip
                        ).pack()),
                    InlineKeyboardButton(
                        text='üîÑ –°–º–µ–Ω–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                        callback_data=SubscriptionCallbackFactory(
                            action='replace_app',
                            subscription_id=subscription_id,
                            name_app=name_app
                        ).pack())
                )
                keyboard.add(
                    InlineKeyboardButton(
                        text='‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                        callback_data=SubscriptionCallbackFactory(
                            action='extend_subscription',
                            subscription_id=subscription_id
                        ).pack())
                    )

                keyboard.adjust(2, 1)

                return keyboard.as_markup()
            except Exception as e:
                await logger.log_error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–æ–¥–ø–∏—Å–∫–æ–π', e)

    @staticmethod
    async def get_back_button_keyboard(callback: str = "back_to_support_menu") -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()

        back_button = InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data=callback
        )

        keyboard.add(back_button)

        return keyboard.as_markup()

    @staticmethod
    async def show_start_menu() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é."""
        keyboard = InlineKeyboardBuilder()

        # –ö–Ω–æ–ø–∫–∞ "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ"
        know_more_button = InlineKeyboardButton(
            text="–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ",
            callback_data="know_more",
        )

        # –ö–Ω–æ–ø–∫–∞ "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
        subscribe_button = InlineKeyboardButton(
            text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
            callback_data="subscribe"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard.add(know_more_button, subscribe_button)

        return keyboard.as_markup()

    @staticmethod
    async def support_and_subscribe_keyboard() -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
        support_button = InlineKeyboardButton(
            text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞",
            callback_data="support_callback"
        )

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        subscribe_button = InlineKeyboardButton(
            text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
            callback_data="subscribe"
        )

        keyboard.add(support_button, subscribe_button)

        # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        keyboard.adjust(2)

        return keyboard.as_markup()

    @staticmethod
    async def get_guide(turn_on: str = None) -> InlineKeyboardMarkup:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
        keyboard = InlineKeyboardBuilder()

        instruction_button = InlineKeyboardButton(
            text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìñ",
            url=LEXICON_RU['outline_info']  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        )
        keyboard.add(instruction_button)

        if turn_on:
            back_button = InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="back_to_support_menu"
            )
            keyboard.add(back_button)

        keyboard.adjust(1)

        return keyboard.as_markup()

    @staticmethod
    async def create_user_pagination_with_users_keyboard(users, page: int, has_next: bool) -> InlineKeyboardMarkup:
        buttons = [[
            InlineKeyboardButton(text="Add all ‚úÖ", callback_data="add_all_users"),
            InlineKeyboardButton(text="Add subs ‚úÖ", callback_data="add_active_users")
        ]]

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user in users:
            buttons.append([InlineKeyboardButton(
                text=f"{user['username']} ({user['user_id']}) {'‚úÖ' if user['selected'] else ''}",
                callback_data=UserSelectCallback(user_id=user['user_id']).pack()
            )])

        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_buttons = [
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=UserPaginationCallback(
                    page=page,
                    action="previous"
                ).pack()) if page > 1 else InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="noop"),
            InlineKeyboardButton(
                text=f"{page}",
                callback_data="noop"
            ),
            InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=UserPaginationCallback(
                    page=page,
                    action="next"
                ).pack()) if has_next else InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data="noop"
            ),
        ]
        pagination_buttons = [button for button in pagination_buttons if button is not None]

        buttons.append(pagination_buttons)

        buttons.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ—Ö ‚ùå", callback_data="cancel_all")])
        buttons.append([InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save")])
        buttons.append([InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')])

        return InlineKeyboardMarkup(inline_keyboard=buttons)

    @staticmethod
    async def show_notify_change_cancel() -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()

        edit_message = InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_message")
        send_notification = InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="send_notification")
        cancel_button = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç" –∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ" –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        keyboard.add(edit_message, send_notification)
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å" –≤ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        keyboard.add(cancel_button)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞: –º–∞–∫—Å–∏–º—É–º –ø–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
        keyboard.adjust(2)

        return keyboard.as_markup()

    @staticmethod
    async def replace_app(name_app) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()
        if name_app == NameApp.OUTLINE:
            button = InlineKeyboardButton(text="VLESS", callback_data=SubscriptionCallbackFactory(
                action='name_app', name_app="VLESS").pack())
        else:
            button = InlineKeyboardButton(text="OUTLINE", callback_data=SubscriptionCallbackFactory(
                action='name_app', name_app="OUTLINE").pack())
        keyboard.add(button)

        return keyboard.as_markup()

    @staticmethod
    async def show_guide(name_app) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()
        vless = InlineKeyboardButton(text="VLESS", callback_data=GuideSelectCallback(
            action='show_guide', name_oc=name_app, name_app='vless').pack())
        outline = InlineKeyboardButton(text="OUTLINE", callback_data=GuideSelectCallback(
            action='show_guide', name_oc=name_app, name_app='outline').pack())
        back = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=GuideSelectCallback(
            action='show_guide', name_oc=name_app, name_app='back').pack())
        keyboard.row(vless, outline)
        keyboard.add(back)
        keyboard.adjust(2, 1)

        return keyboard.as_markup()

    @staticmethod
    async def server_management_options(server_ip, hidden_status) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()
        if hidden_status == 0:
            show_status = InlineKeyboardButton(
                text="–í—ã–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä",
                callback_data=ServerCallbackData(action="disable", server_ip=server_ip).pack()
            )
        else:
            show_status = InlineKeyboardButton(
                text="–í–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä",
                callback_data=ServerCallbackData(action="enable", server_ip=server_ip).pack()
            )
        server_name = InlineKeyboardButton(
            text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
            callback_data=ServerCallbackData(action="change_name", server_ip=server_ip).pack()
        )
        server_limit = InlineKeyboardButton(
            text="–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç",
            callback_data=ServerCallbackData(action="change_limit", server_ip=server_ip).pack()
        )
        keyboard.add(show_status, server_name, server_limit)

        return keyboard.as_markup()
