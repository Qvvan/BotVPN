import time
from typing import Any, Awaitable, Callable, Dict

from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery, Update, ReplyKeyboardRemove

from logger.logging_config import logger

# –ó–∞–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω—Ç–∏—Å–ø–∞–º–∞
MINIMUM_TIME_BETWEEN_ACTIONS = 0.4  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ —Å—á–∏—Ç–∞–ª–æ—Å—å —Å–ø–∞–º–æ–º (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
SPAM_SERIES_THRESHOLD = 2  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–¥—Ä—è–¥, –∫–æ—Ç–æ—Ä–æ–µ —Å—á–∏—Ç–∞–µ–º —Å–ø–∞–º–æ–º
SPAM_WARNING_TIMEOUT = 3  # –í—Ä–µ–º—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö), –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–π —Å–ø–∞–º

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, –∞ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
user_last_action_time = {}
user_action_count = {}
user_warning_time = {}


class MessageLoggingMiddleware(BaseMiddleware):

    async def __call__(
            self,
            handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
            event: Update,
            data: Dict[str, Any]
    ) -> Any:
        if isinstance(event, Message):
            user_id = event.chat.id
            username = event.chat.username
            current_time = time.time()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if user_id in user_warning_time and current_time - user_warning_time[user_id] < SPAM_WARNING_TIMEOUT:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ—á–µ–Ω–∏–µ SPAM_WARNING_TIMEOUT –ø–æ—Å–ª–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º: —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π/–∫–æ–º–∞–Ω–¥
            if user_id in user_last_action_time:
                time_since_last_action = current_time - user_last_action_time[user_id]

                if time_since_last_action < MINIMUM_TIME_BETWEEN_ACTIONS:
                    user_action_count[user_id] += 1
                else:
                    user_action_count[user_id] = 1
            else:
                user_action_count[user_id] = 1

            user_last_action_time[user_id] = current_time

            # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ –¥–ª—è —Å–ø–∞–º–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if user_action_count[user_id] >= SPAM_SERIES_THRESHOLD:
                if user_id not in user_warning_time or current_time - user_warning_time[
                    user_id] >= SPAM_WARNING_TIMEOUT:
                    await event.answer(
                        "üö® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ! üôè –î–∞–π—Ç–µ –º–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å.",
                        reply_markup=ReplyKeyboardRemove())
                    await logger.log_error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) —Å–ø–∞–º–∏—Ç –∫–æ–º–∞–Ω–¥–∞–º–∏/–∫–Ω–æ–ø–∫–∞–º–∏.",
                                           '–°–ø–∞–º')
                    user_warning_time[user_id] = current_time
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–º–∞–Ω–¥–∞)
            text = "–ó–∞–≥—Ä—É–∑–∫–∞ üîÑ"
            await logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {event.text}")
            if text:
                sent_message = await event.answer(text, reply_markup=ReplyKeyboardRemove())
                await sent_message.delete()

        return await handler(event, data)


class CallbackLoggingMiddleware(BaseMiddleware):

    async def __call__(
            self,
            handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
            event: Update,
            data: Dict[str, Any]
    ) -> Any:
        if isinstance(event, CallbackQuery):
            user_id = event.from_user.id
            username = event.from_user.username
            button_text = event.data
            current_time = time.time()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if user_id in user_warning_time and current_time - user_warning_time[user_id] < SPAM_WARNING_TIMEOUT:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ—á–µ–Ω–∏–µ SPAM_WARNING_TIMEOUT –ø–æ—Å–ª–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º: —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
            if user_id in user_last_action_time:
                time_since_last_action = current_time - user_last_action_time[user_id]

                if time_since_last_action < MINIMUM_TIME_BETWEEN_ACTIONS:
                    user_action_count[user_id] += 1
                else:
                    user_action_count[user_id] = 1
            else:
                user_action_count[user_id] = 1

            user_last_action_time[user_id] = current_time

            # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ –¥–ª—è —Å–ø–∞–º–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if user_action_count[user_id] >= SPAM_SERIES_THRESHOLD:
                await event.message.answer(
                    "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ç–∞–∫ —á–∞—Å—Ç–æ! üòÖ –î–∞–π—Ç–µ –º–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.")
                await logger.log_error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) —Å–ø–∞–º–∏—Ç –∫–æ–º–∞–Ω–¥–∞–º–∏/–∫–Ω–æ–ø–∫–∞–º–∏.", '–°–ø–∞–º')

                user_warning_time[user_id] = current_time
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
            await logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {button_text}")

        return await handler(event, data)
